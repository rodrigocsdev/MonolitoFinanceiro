unit MonolitoFinanceiro.Model.ContasReceber;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Datasnap.Provider,
  Data.DB, Datasnap.DBClient, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  MonolitoFinanceiro.Model.Conexao,
  MonolitoFinanceiro.Model.Entidades.ContaReceber,
  MonolitoFinanceiro.Model.Entidades.ContaReceber.Detalhe;

type
  TdmContasReceber = class(TDataModule)
    sqlContasReceber: TFDQuery;
    cdsContasReceber: TClientDataSet;
    dspContasReceber: TDataSetProvider;
    cdsContasReceberid: TStringField;
    cdsContasRecebernumero_documento: TStringField;
    cdsContasReceberdescricao: TStringField;
    cdsContasReceberparcela: TIntegerField;
    cdsContasRecebervalor_parcela: TFMTBCDField;
    cdsContasRecebervalor_venda: TFMTBCDField;
    cdsContasRecebervalor_abatido: TFMTBCDField;
    cdsContasReceberdata_venda: TDateField;
    cdsContasReceberdata_cadastro: TDateField;
    cdsContasReceberdata_vencimento: TDateField;
    cdsContasReceberdata_recebimento: TDateField;
    cdsContasReceberstatus: TStringField;
  private
    { Private declarations }
    procedure GravarContaReceber(ContaReceber: TModelContaReceber; SQLGravar : TFDQuery);
    procedure GravarContaReceberDetalhe(ContaReceberDetalhe : TModelContaReceberDetalhe; SQLGravar : TFDQuery);
  public
    { Public declarations }
    function GetContaReceber(ID : string) : TModelContaReceber;
    procedure BaixarContaReceber(BaixaReceber: TModelContaReceberDetalhe);
  end;

var
  dmContasReceber: TdmContasReceber;

implementation

uses
  MonolitoFinanceiro.Utilitarios;

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ TdmContasReceber }

procedure TdmContasReceber.BaixarContaReceber(
  BaixaReceber: TModelContaReceberDetalhe);
begin

end;

function TdmContasReceber.GetContaReceber(ID: string): TModelContaReceber;
begin

end;

procedure TdmContasReceber.GravarContaReceber(ContaReceber: TModelContaReceber;
  SQLGravar: TFDQuery);
begin
var
  SQL : string;
begin
  SQL := 'UPDATE CONTAS_RECEBER SET VALOR_ABATIDO = :VALORABATIDO,' +
        ' VALOR_PARCELA = :VALORPARCELA,' +
        ' STATUS = :STATUS,' +
        ' DATA_RECEBIMENTO = :DATARECEBIMENTO' +
        ' WHERE ID = :IDCONTARECEBER;';

  SQLGravar.SQL.Clear;
  SQLGravar.Params.clear;

  SQLGravar.SQL.ADD(SQL);
  SQLGravar.ParamByName('VALORABATIDO').AsCurrency := ContaReceber.ValorAbatido;
  SQLGravar.ParamByName('VALORPARCELA').AsCurrency := ContaReceber.ValorParcela;
  SQLGravar.ParamByName('STATUS').AsString := ContaReceber.Status;
  TUtilitarios.ValidarData(SQLGravar.ParamByName('DATARECEBIMENTO'), ContaReceber.DataPagamento);
  SQLGravar.ParamByName('IDCONTARECEBER').AsString := ContaReceber.ID;

  SQLGravar.Prepare;
  SQLGravar.ExecSQL;

end;

procedure TdmContasReceber.GravarContaReceberDetalhe(
  ContaReceberDetalhe: TModelContaReceberDetalhe; SQLGravar: TFDQuery);
begin

end;

end.
